syntax = "proto3";

package codec;

message ConnectMsgBody{
    string protoId = 1;
    string sdkVersion = 2; //sdk 版本
    string appkey = 3;
    string token = 4;

    //设备信息
    string deviceId = 5;
    string platform = 6;//iOS/Android/iPad
    string deviceCompany = 7;//设备厂商, huawei/apple
    string deviceModel = 8;//设备型号  例如: iPhone8
    string deviceOsVersion = 9;//手机操作系统版本
    string pushToken = 10;//厂商推送Token
    //网络
    string networkId = 11;//网络类型；4G/wifi
    string isp_num = 12;//网络运营商编号
    string clientIp = 13;

    string packageName =14;
    string pushChannel =15;
    string ext = 16;
    string clientSession = 17;
}

message ConnectAckMsgBody{
    int32 code = 1;
    string userId = 2;
    string session = 3;
    int64 timestamp = 4;
    string ext = 5;
}

message DisconnectMsgBody{
    int32 code = 1;
    int64 timestamp = 2;
    string ext = 3;
}

message PublishMsgBody{
    int32 index = 1;
    string topic = 2;
    string targetId = 3;
    int64 timestamp = 4;
    bytes data = 5;
}

message PublishAckMsgBody{
    int32 index = 1;
    int32 code = 2;
    string msgId = 3;
    int64 timestamp = 4;
    int64 msgIndex = 5;
    int32 memberCount = 6;
}

message QueryMsgBody{
    int32 index = 1;
    string topic = 2;
    string targetId = 3;
    int64 timestamp = 4;
    bytes data = 5;
}

message QueryAckMsgBody{
    int32 index = 1;
    int32 code = 2;
    int64 timestamp = 3;
    bytes data = 4;
}

message QueryConfirmMsgBody{
    int32 index = 1;
}

message ImWebsocketMsg {
    int32 version = 1;
    int32 cmd = 2;
    int32 qos  = 3;
    bytes payload = 4;
    oneof testof{
        ConnectMsgBody connectMsgBody = 11;
        ConnectAckMsgBody ConnectAckMsgBody = 12;
        DisconnectMsgBody disconnectMsgBody = 13;
        PublishMsgBody publishMsgBody = 14;
        PublishAckMsgBody pubAckMsgBody = 15;
        QueryMsgBody qryMsgBody = 16;
        QueryAckMsgBody qryAckMsgBody = 17;
        QueryConfirmMsgBody qryConfirmMsgBody = 18;
    }
}

enum ChannelType {
    Private = 1;  //单聊
    Group = 2;    //群聊
    Chatroom = 3; // 聊天室
    System = 4;   // 系统消息
}

message PushData{
    string title = 1;
    string pushId = 2;
    string pushText = 3;
    string pushExtraData = 4;
}

message QryHisMsgsReq{
    string converId = 1;
    ChannelType type = 2;
    int64 startTime = 3;
    int32 count = 4;
    int32 order = 5;
    repeated string msgTypes = 6;
}

message DownMsgSet{
    repeated DownMsg msgs = 1;
    int64 syncTime = 2;
    bool isFinished = 3;
    UserInfo targetUserInfo = 4;
    GroupInfo groupInfo = 5;
}

message UpMsg {
    string msgType = 1;   //消息类型定义
    bytes msgContent= 2;  // 消息实体数据
    int32 flags = 3;      // 标识 
    string clientUid=4;   //客户端指定的消息唯一ID
    PushData pushData = 5; // 推送设置
    MentionInfo mentionInfo = 6; //@ 消息
    DownMsg referMsg = 7;
    repeated string toUserIds = 8;
    MergedMsgs mergedMsgs = 9;
}
message MentionInfo {
    MentionType mentionType = 1;
    repeated UserInfo targetUsers = 2;  //被@ 人列表
}
enum MentionType{
    MentionDefault = 0;
    MentionAll = 1;    //@ 所有人
    MentionSomeone = 2; //@ 指定人
}
message DownMsg{
    string targetId = 1;
    ChannelType type = 2;
    string msgType = 3;
    string senderId = 4;
    string msgId = 5;
    // msgIndex 是双方混排的序号！序号！序号！
    int64 msgIndex = 6;
    bytes msgContent = 7;
    int64 msgTime = 8;
    int32 flags = 9;
    bool isSend = 10;
    string platform = 11;
    string clientUid = 12;
    PushData pushData = 13;
    MentionInfo mentionInfo = 14;
    bool isRead = 15;
    DownMsg referMsg = 16;
    UserInfo targetUserInfo = 17;
    GroupInfo groupInfo = 18;
    MergedMsgs mergedMsgs = 19;
    int32 undisturbType = 20;
    int32 memberCount = 21;
    int32 readCount = 22;
    int64 unreadIndex = 23;
    repeated StreamMsgItem msgItems = 24;
    repeated MsgExtItem msgExtSet = 25;
    repeated MsgExtItem msgExts = 26;
    repeated ConverTag converTags = 27;
}

message StreamMsgItem{
  StreamEvent event = 1;
  int64 subSeq = 2;
  bytes partialContent= 3;
}

message StreamDownMsg{
  string targetId = 1;
  ChannelType channelType = 2;
  string msgId = 3;
  repeated StreamMsgItem msgItems = 4;
}

enum StreamEvent{
  DefaultStreamEvent = 0;
  StreamMessage = 1;
  StreamComplete = 2;
}

message MergedMsgs{
    ChannelType channelType = 1;
    string userId = 2;
    string targetId = 3;
    repeated SimpleMsg msgs = 4;
}

message GroupInfo{
    string groupId = 1;
    string groupName = 2;
    string groupPortrait = 3;
    int32 isMute = 4;
    repeated KvItem extFields = 5;
    int64 updatedTime = 6;
}

message KvItem{
    string key = 1;
    string value = 2;
}

message UserIdReq{
    string userId = 1;
}

message UserInfo{
    string userId = 1;
    string nickname = 2;
    string userPortrait = 3;
    repeated KvItem extFields = 4;
    int64 updatedTime = 5;
}

message SyncConversationsReq{
    int64 startTime = 1;
    int32 count = 2;
}

message QryConversationsReq{
    int64 startTime = 1;
    int32 count = 2;
    int32 order = 3;

    string targetId = 5;
    ChannelType channelType = 6;
    string tag = 7;
}

message QryConversationsResp{
    repeated Conversation conversations = 1;
    bool isFinished = 2;
}
message ClearUnreadReq{
    repeated Conversation conversations = 1;
}
message DelConversationReq{
    repeated Conversation conversations = 1;
}
message ConversationsReq{
    repeated Conversation conversations = 1;
}
message Conversation{
    string userId = 1;
    string targetId = 2;
    ChannelType channelType = 3;
    int64 sortTime = 4;
    int64 unreadCount = 5;
    DownMsg msg = 6;
    int64 latestReadIndex = 7;
    Mentions mentions = 8;
    int32 isTop = 9;
    int64 topUpdatedTime = 10;
    int32 undisturbType = 11;
    UserInfo targetUserInfo = 12;
    GroupInfo groupInfo = 13;
    int64 syncTime = 14;
    int32 isDelete = 15;
    int64 latestUnreadIndex = 16;
    int32 unreadTag = 17;
    string latestReadMsgId = 18;
    int64 latestReadMsgTime = 19;
    repeated ConverTag converTags = 20;
}

message Mentions{
    bool isMentioned = 1;
    int32 mentionMsgCount = 2;
    repeated UserInfo senders = 3;
    repeated MentionMsg mentionMsgs = 4;
}
message MentionMsg{
    string senderId = 1;
    string msgId = 2;
    int64 msgTime = 3;
}

message SyncMsgReq{
    int64 syncTime = 1;//收件箱同步时间
    bool containsSendBox = 2;//是否包含发件箱消息
    int64 sendBoxSyncTime = 3;//发件箱同步时间,
    string chatroomId = 4;
}


message SyncChatroomReq{
  string chatroomId = 1;//聊天室id
  int64 syncTime = 2; // 聊天室消息同步时间戳
  int32 count = 3;
}

message SyncChatroomMsgResp{
  repeated DownMsg msgs = 1;
}
message Notify{
    NotifyType type = 1;
    int64 syncTime = 2;
    string chatroomId = 3;
}
enum NotifyType {
    Default = 0;
    Msg = 1;
    ChatroomMsg = 2;  // 聊天室消息通知
    ChatroomAtt = 3;  // 聊天室属性变更通知
    ChatroomEvent = 4;  // 聊天室事件通知，如有人加入/退出
    ChatroomDestroy = 5; // 聊天室销毁
}
message RecallMsgReq{
    string targetId = 1;   //单聊是为对方userid，群聊时为groupid
    ChannelType channelType = 2;
    string msgId = 3;  //待撤回消息的msg_id
    int64 msgTime = 4; //待撤回消息的发送时间
    repeated KvItem exts = 5; // 携带扩展数据，用于控制撤回消息的展示逻辑
}
message MarkReadReq{
    string targetId = 1;
    ChannelType channelType = 2;
    repeated SimpleMsg msgs = 3;  //批量标记消息的已读状态
    repeated IndexScope indexScopes = 4;
}

message SimpleMsg{
    string msgId = 1;
    int64 msgTime = 2;
    int64 msgIndex = 3;
}

message IndexScope{
    int64 startIndex = 1;
    int64 endIndex = 2;
}
message ModifyMsgReq{
    string targetId = 1;
    ChannelType channelType = 2;
    string msgId = 3;  //必填
    int64 msgTime = 4; //可选
    int64 msgSeqNo = 5; //可选
    bytes msgContent = 6; //修改后的消息内容
}
message CleanHisMsgReq{
    string targetId = 1;
    ChannelType channelType = 2;
    int64 cleanMsgTime = 3;
}
message QryHisMsgByIdsReq{
    string targetId = 1;
    ChannelType channelType = 2;
    repeated string msgIds = 3;
}
message ChatRoomReq{
    string chatId = 1;
    string chatName = 2;
    bool isAutoCreate = 3;
}
message QryTotalUnreadCountReq{
    int64 time = 1;
    ConverFilter filter = 2;
}
message ConverFilter{
  repeated ChannelType channelTypes = 1;
  repeated SimpleConversation ignoreConvers = 2;
  string tag = 4;
}
message SimpleConversation {
  string targetId = 1;
  ChannelType channelType = 2;
}
message QryTotalUnreadCountResp{
    int64 totalCount = 1;
}
message QryMentionMsgsReq{
    string targetId = 1;
    ChannelType channelType = 2;
    int64 startIndex = 3;
    int32 count = 4;
    int32 order = 5;  //0：倒序；1：正序
    int64 latestReadIndex = 6;
}
message QryMentionMsgsResp{
    repeated DownMsg mentionMsgs = 1;
    bool isFinished = 2;
}
message QMentionMsg{
    MentionType mentionType = 1;
    UserInfo senderInfo = 2;
    DownMsg msg = 3;
}
message QryUploadTokenResp{
    OssType ossType = 1;
    oneof ossOf{
        QiniuCredResp qiniuCred = 11;
        PreSignResp preSignResp = 12;
    }
}
message PreSignResp {
  string url = 1;
}
enum OssType{
    DefaultOss = 0;
    QiNiu = 1;
    S3 = 2;
    Minio = 3;
    Oss = 4;
}
message QiniuCredResp{
    string domain = 1;
    string token = 2;
}

message QryUploadTokenReq{
    FileType fileType = 1;
    string ext = 2;
}
enum FileType {
    DefaultFileType = 0;
    Image = 1;
    Audio = 2;
    Video = 3;
    File = 4;
}
message QryReadDetailReq{
    string targetId = 1;
    ChannelType channelType = 2;
    string msgId = 3;
}
message QryReadDetailResp{
    int32 readCount = 1;
    int32 memberCount = 2;
    repeated MemberReadDetailItem readMembers = 3;
    repeated MemberReadDetailItem unreadMembers = 4;
}
message MemberReadDetailItem{
    UserInfo member = 1;
    int64 time = 2;
}
message QryMergedMsgsReq{
    int64 startTime = 1;
    int32 count = 2;
    int32 order = 3;
}
message UndisturbConversReq {
    string userId = 1;
    repeated UndisturbConverItem items = 2;
}
message UndisturbConverItem {
    string targetId = 1;
    ChannelType channelType = 2;
    int32 undisturbType = 3;  // 0：非免打扰；1：普通免打扰
}
message QryTopConversReq{
    int64 startTime = 1;
}
message DelHisMsgsReq{
    string senderId = 1;
    string targetId = 2;
    ChannelType channelType = 3;
    repeated SimpleMsg msgs = 4; 
}
message QryConverReq{
  string targetId = 1;
  ChannelType channelType = 2;
}

message SyncChatroomAttResp{
  repeated ChatAttItem atts = 1;
}

message ChatAtts{
    string chatId = 1;
    repeated ChatAttItem atts = 2;
    bool isComplete = 3;   // 是否同步的全量聊天室属性，如果是全量，需要以此列表替换本地该聊天室所有属性
    bool isFinished = 4;
}
message ChatAttItem{
  string key = 1;
  string value = 2;
  int64 attTime = 3;
  string userId = 4;
  ChatAttOptType optType = 5;
}
enum ChatAttOptType{
    ChatAttOpt_Default = 0;
    ChatAttOpt_Add = 1;
    ChatAttOpt_Del = 2;
}
message UserUndisturb{
  bool switch = 1;
  string timezone = 2;
  repeated UserUndisturbItem rules = 3;
}

message UserUndisturbItem {
  string start = 1;
  string end = 2;
}
message Nil{
}
message ChatAttBatchReq{
  repeated ChatAttReq atts = 1;
}
message ChatAttBatchResp{
  repeated ChatAttResp attResps = 1;
}

message ChatAttReq{
  string key = 1;
  string value = 2;
  bool isForce = 3;  //是否强制覆盖，否：则该key已有值时，不覆盖
  bool isAutoDel = 4; //是否在该属性所有者离开房间时自动删除；否：则不自动删除；
  UpMsg msg = 5; //设置属性时，同时发送一条聊天室消息；
}
message ChatAttResp{
  string key = 1;  
  int32 code = 2; // 设置属性时的返回码
  int64 attTime = 3;  //属性的设置时间

  //当设置属性时，附带发送消息时，下列属性有效
  int32 msgCode = 11; // 消息发送的响应码
  string msgId = 12;  //消息的id
  int64 msgTime = 13; //消息的时间戳
  int64 msgSeq = 14; //消息的序号
}
message QryFirstUnreadMsgReq{
  string targetId = 1;
  ChannelType channelType = 2;
}
message ChrmEvent{
    ChrmEventType eventType = 1;
    string chatId = 2;
    string userId = 3;
    int64 eventTime = 4;
}
enum ChrmEventType{
    Join = 0;  //加入聊天室通知
    Quit = 1;  // 主动退出聊天室通知
    Kick = 2;   // 踢出聊天室通知
    Fallout = 3;  // 自动掉出聊天室通知
}
message MsgExt {
  string targetId = 1;
  ChannelType channelType = 2;
  string msgId = 3;
  MsgExtItem ext = 4;
}
message MsgExtItem {
  string key = 1;
  string value = 2;
  int64 timestamp = 3;
}

message TagConvers{
  string tag = 1;
  string tagName = 2;
  repeated SimpleConversation convers = 11;
}
message UserConverTags{
  repeated ConverTag tags = 1;
}
message ConverTag{
  string tag = 1;
  string tagName = 2;
  ConverTagType tagType = 3;
}
enum ConverTagType{
  UserTag = 0;
  SystemTag = 1;
  GlobalTag = 2;
}

message RtcRoomReq{
    RtcRoomType roomType = 1;
    string roomId = 2;
    RtcMember joinMember = 3;
}

enum RtcRoomType{
    OneOne = 0;
    OneMore = 1;
}

message RtcMember{
    UserInfo member = 1;
    RtcState rtcState = 2;
    int64 callTime = 3;
    int64 connectTime = 4;
    int64 hangupTime = 5;
    UserInfo inviter = 6;
}
enum RtcState{
    RtcStateDefault = 0;
    RtcIncoming = 1;
    RtcOutgoing = 2;
    RtcConnecting = 3;
    RtcConnected = 4;
}
message RtcRoom{
    RtcRoomType roomType = 1;
    string roomId = 2;
    UserInfo owner = 3;
    repeated RtcMember members = 51;
}
message RtcInviteReq{
    repeated string targetIds = 1;
    RtcRoomType roomType = 2;
    string roomId = 3;
    RtcChannel rtcChannel = 4;
    RtcMediaType rtcMediaType = 5;
}

enum RtcMediaType{
    RtcAudio = 0;
    RtcVideo = 1;
}

enum InviteType{
    RtcInvite = 0;
    RtcAccept = 1;
    RtcHangup = 2;
}
message RtcInviteEvent{
    InviteType inviteType = 1;
    UserInfo user = 2; //事件发起人的用户信息
    RtcRoom room = 3;
    repeated UserInfo targetUsers = 4; 
}
message RtcAnswerReq{
    string targetId = 1;
    string roomId = 2;
}
enum RtcChannel {
    Zego = 0;
}
message RtcAuth{
    ZegoAuth zegoAuth = 1;
}
message ZegoAuth{
    string token = 1;
}
message RtcRoomEvent{
    RtcRoomEventType roomEventType = 1;
    repeated RtcMember members = 2;
    RtcRoom room = 3;
    RtcRoomQuitReason reason = 4;
    int64 eventTime = 5;
}
enum RtcRoomEventType{
    DefaultRtcRoomEvent = 0;
    RtcJoin = 1;
    RtcQuit = 2;
    RtcDestroy = 3;
    RtcStateChg = 4;
}

enum RtcRoomQuitReason{
    Active = 0; //主动退出
    CallTimeout = 1;//暂时废弃
    PingTimeout = 2; //ping超时，自动被提出
}